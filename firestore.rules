rules_version = '2';
service cloud.firestore {
	// Explicitly defining rules for 'default' database (There only exists default db.) 
	// Preventing the creation of duplicate DB & Export hacks.
  match /databases/{database}/documents {
  	
    // Define any future rules by specific subcollection and avoid the use of
    // any glob commands, as our security and our structure can evolve rapidly 
    // and potentially leak sensitive data.
    
    // Matches against any document in the 'users' collection .
		// Allows read, write only if the requesting user's uid is equal 
		// to the name of the document being requested
    match /users/{userID} {
    	allow read, write: if request.auth != null && request.auth.uid == userID;
      
      // Explicitly defining rules for 'notes' subcollection
      // 
      // Matches against any document in the 'notes' subcollection within a user document.
      // 
      // Allows read, write only if the requesting user's uid
      // has a document named with their uid in the 'users' parent collection.
      // 
      // Does a document with the requesting user's UID exist in the 'users' collection?
			// If Yes, then allow read/write in their user document's subcollection: notes.
      // Otherwise, Deny.
      match /notes/{note} {
      	allow read, write: if request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid));
      }
      
      // 'public_notes' subcollection
      match /public_notes/{note} {
  			allow read: if true;
  			allow write:if request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid));
			}
      
      // 'public_profile' subcollection
      match /public_profile/{data} {
  			allow read: if true;
  			allow write:if request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid));
			}
    }
  }
}